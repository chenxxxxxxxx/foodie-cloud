server:
  port: 10003

spring:
  shardingsphere:
    # 读写分离（Sharding - 只支持一主多从）
    datasource:
      names: master0,slave0
      master0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/foodie-order?useUnicode=true&autoReconnect=true&serverTimezone=UTC
        username: root
        password: 123456
      slave0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/foodie-order-slave?useUnicode=true&autoReconnect=true&serverTimezone=UTC
        username: root
        password: 123456
    props:
      sql:
        show: true
    sharding:
      master-slave-rules:
        ds0:
          master-data-source-name: master0
          slave-data-source-names: slave0

    # 数据库分片
      tables:
        orders:
          actual-data-nodes: ds0.orders_$->{1..2}
          #数据源分片，此处只有一个master库，所以不需要分片
#      default-database-strategy:
#        inline.sharding-column: user_id
#        inline.algorithm-expression: ds$->{user_id % 2}
          # 表分片
          table-strategy:
            standard:
              sharding-column: id
#              algorithm-expression: orders_$->{id % 2}
              precise-algorithm-class-name: com.tt.order.algorithm.TableShardingAlgorithm
        order_status:
          actual-data-nodes: ds0.order_status_$->{1..2}
          # 表分片
          table-strategy:
            standard:
              sharding-column: order_id
#              algorithm-expression: order_status_$->{order_id % 2}
              precise-algorithm-class-name: com.tt.order.algorithm.OrderStatusTableShardingAlgorithm
        order_items:
          actual-data-nodes: ds0.order_items_$->{1..2}
          # 表分片
          table-strategy:
            inline:
              sharding-column: order_id
              algorithm-expression: order_items_$->{order_id % 2}

mybatis:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

redisson:
  address: redis://192.168.1.105:6379
  password: imooc

# Ribbon全局配置
ribbon:
  ConnectTimeout: 1000
  ReadTimeout: 3000

# Ribbon指定服务配置超时判定，优先级更高
foodie-user-service:
  ribbon:
    ConnectTimeout: 1000
    ReadTimeout: 3000
    MaxAutoRetries: 1
    MaxAutoRetriesNextServer: 2
    OkToRetryOnAllOperations: true

# Feign的超时判定，优先级高于Ribbon
feign:
  hystrix:
    enabled: true
  client:
    config:
      # 全局默认配置
      default:
        connectTimeout: 1000
        readTimeout: 5000
      # 优先级比上面那伙计高
      foodie-user-service:
        connectTimeout: 1000
        readTimeout: 5000

## 开启所有actuator-endpoint
management:
  endpoint:
    health:
      show-details: always
  endpoints:
    web:
      exposure:
        include: '*'

hystrix:
  command:
    # 有的属性是默认值，写不写都行
    default:
      fallback:
        enabled: true
      circuitBreaker:
        enabled: true
        # 超过50%错误，那么开启熔断
        errorThresholdPercentage: 50
        # 5个request之后才进行统计
        requestVolumeThreshold: 5
        # 10秒之后进入半开状态
        sleepWindowInMilliseconds: 10000
        # forceClosed, forceOpen 强制关闭/开启熔断开关
      execution:
        timeout:
          enabled: true
        # 可以指定隔离方式是线程池还是信号量
        isolation:
          thread:
            interruptOnTimeout: true
            interruptOnFutureCancel: true
            timeoutInMilliseconds: 4000
      metrics:
        rollingStats:
          # 时间窗口统计
          timeInMilliseconds: 20000