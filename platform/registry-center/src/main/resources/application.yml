spring:
  application:
    name: eureka-server
  profiles:
    active: dev

server:
  port: 20000

eureka:
  server:
    # 在eureka服务器获取不到集群里对等服务器上的实例时，需要等待的时间，单机默认0
    wait-time-in-ms-when-sync-empty: 0
    # 是否开启只读请求响应缓存。响应缓存 ( ResponseCache ) 机制目前使用两层缓存策略。优先读取只读缓存，读取不到后读取固定过期的读写缓存。
    use-read-only-response-cache: true
    # 关闭服务器自我保护，客户端心跳检测15分钟内错误达到80%服务会保护，导致别人还认为是好用的服务
    enable-self-preservation: false
    # 清理间隔（单位毫秒，默认是60*1000）
    eviction-interval-timer-in-ms: 6000
    # eureka server刷新readCacheMap的时间，注意，client读取的是readCacheMap，这个时间决定了多久会把readWriteCacheMap的缓存更新到readCacheMap上默认30s
    response-cache-update-interval-ms: 3000
    # eureka server缓存readWriteCacheMap失效时间，这个只有在这个时间过去后缓存才会失效，失效前不会更新，过期后从registry重新读取注册服务信息，registry是一个ConcurrentHashMap
    response-cache-auto-expiration-in-seconds: 180
  instance:
    prefer-ip-address: true
    ip-address: 192.168.1.104
    # 续约更新时间间隔（默认30秒），eureka客户端向服务端发送心跳的时间间隔
    lease-renewal-interval-in-seconds: 30
    # 续约到期时间（默认90秒）
    lease-expiration-duration-in-seconds: 90
  client:
    # 注册到其他eureka
    registerWithEureka: false
    # 为true时，可以启动，但报异常：Cannot execute request on any known server ，是否从eureka服务端获取注册信息，消费者需要配置true
    fetchRegistry: false
    # 表示是否将服务注册到Eureka服务端，由于自身就是Eureka服务端，所以设置为false；
    register-with-eureka: false
    # 表示是否从Eureka服务端获取服务信息，因为这里只搭建了一个Eureka服务端，并不需要从别的Eureka服务端同步服务信息，所以这里设置为false；
    fetch-registry: false
    # 更新实例信息的变化到Eureka服务端的间隔时间，单位为秒
    instance-info-replication-interval-seconds: 10
    # 从eureka服务端获取注册信息的间隔时间
    registry-fetch-interval-seconds: 30
    # 轮询Eureka服务端地址更改的间隔时间，单位为秒。
    eureka-service-url-poll-interval-seconds: 300
    service-url:
      defaultZone: http://${eureka.instance.ip-address}:${server.port}/eureka/

